filter(Location_of_Breached_Information=="Network Server") |>
summarise(amenazasDistintas=n_distinct(Type_of_Breach))
# Obtener cuántas entidades han sido afectadas para cada tipo de incidente (Type_of_Breach).
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(numeroEntidades = n_distinct(Type_of_Breach)) |>
arrange(desc(numeroEntidades)) |>
slice(4)
# Obtener cuántas entidades han sido afectadas para cada tipo de incidente (Type_of_Breach).
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(numeroEntidades = n_distinct(Name_of_Covered_Entity)) |>
arrange(desc(numeroEntidades)) |>
slice(4)
# Hallar el máximo número de individuos afectados para cada valor de la variable Type_of_Breach` ordenados
# de forma descendente por número de individuos afectados.
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(maximoNumero=max(Individuals_Affected)) |>
arrange(desc(maximoNumero)) |>
slice(1)
# ¿Cuantos tipos distintos de amenaza (Type_of_Breach) ´
# han ocurrido por Network Server` (en una localización)?
Cyber_Security_Breaches |>
filter(Location_of_Breached_Information=="Network Server") |>
summarise(amenazasDistintas=n_distinct(Type_of_Breach))
class(AdultUCI)
# Este dataset no es de tipo transactions, hay que arreglar eso
data("AdultUCI")
v <- 1:100
v2 <- cut(v,c(0,25,50,75,100),labels = c("bajo","medio","alto","muyalto"))
v2
?ordered
ordered
v3 <- ordered(v2)
v3
library(arules)
data("Adult")
dim(Adult)
inspect(Adult[1:3])
ata("AdultUCI")
# Este dataset no es de tipo transactions, hay que arreglar eso
data("AdultUCI")
class(AdultUCI)
view(AdultUCI)
## ----echo=TRUE-----------------------------------------------------------
Adult1 <- as(AdultUCI, "transactions")
class(Adult1)
length(Adult1)
dim(Adult1)
Adult1
inspect(Adult1[1:2])
edad <- 45.2L
as.numeric(2/0)
is.logical(as.numeric(0/0))
as.numeric(0/0)
as.integer(“pi”)
0/0+1
as.integer(“pi”)
Cyber_Security_Breaches <- read.csv("C:/Users/jorge/Desktop/3_SOFTWARE/2o_CUATRI/LAB_COMP/Datasets/Cyber Security Breaches.csv", comment.char="#")
View(Cyber_Security_Breaches)
library(tidyverse)
Cyber_Security_Breaches |>
summarise(n_distinct(Type_of_Breach))
Cyber_Security_Breaches |>
group_by(Type_of_Breach)
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(afectadas==n(Name_of_Covered_Entity))
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(afectadas=n(Name_of_Covered_Entity))
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(numeroEntidades=n())
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(numeroEntidades=n()) |>
arrange(desc(numeroEntidades))
Cyber_Security_Breaches |>
group_by(Type_of_Breach) |>
summarise(numeroEntidades=n()) |>
arrange(desc(numeroEntidades)) |>
slice(5)
Cyber_Security_Breaches |>
filter(Type_of_Breach=="Unauthorized Access/Disclosure, Other") |>
summarise(media=mean(Individuals_Affected))
Cyber_Security_Breaches |>
group_by(Location_of_Breached_Information) |>
summarise(maximoAfectados=max(Individuals_Affected))
Cyber_Security_Breaches |>
group_by(Location_of_Breached_Information) |>
summarise(maximoAfectados=max(Individuals_Affected)) |>
arrange(desc(maximoAfectados))
Cyber_Security_Breaches |>
filter(Location_of_Breached_Information=="Laptop, Desktop Computer, Network Server, E-mail") |>
Cyber_Security_Breaches |>
filter(Location_of_Breached_Information=="Laptop, Desktop Computer, Network Server, E-mail") |>
summarise(n_distinct(Type_of_Breach))
Cyber_Security_Breaches |>
filter(Location_of_Breached_Information=="Laptop, Desktop Computer, Network Server, E-mail") |>
summarise(amenazasDistintas=n_distinct(Type_of_Breach))
install.packages("arulesViz")
library(arules)
library(arulesViz)
data(Groceries)
View(Groceries)
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
rules
inspect(head(rules))
plot(rules)
#Ejecutar en vuestro ordenador
sel <- plot(rules, engine = "interactive")
subrules <- subset(rules, lift>8)
subrules
plot(subrules, method="matrix")
sel <- plot(rules, engine = "interactive")
plot(rules, engine = "htmlwidget")
subrules <- subset(rules, lift>8)
subrules
plot(subrules, method="matrix")
plot(subrules, method="matrix", engine = "3d")
plot(subrules, method="matrix", shading=c("lift", "confidence"))
# Ejecutar en vuestro ordenador
plot(subrules, method="matrix", engine="interactive")
plot(subrules, method="matrix", engine="htmlwidget")
plot(subrules, method="grouped matrix")
plot(subrules, method="grouped matrix",
col = grey.colors(10),
gp_labels = gpar(col = "blue", cex=1, fontface="italic"))
plot(subrules, method="grouped matrix",
col = grey.colors(10),
gp_labels = gpar(col = "blue", cex=1, fontface="italic"))
sel <- plot(rules, method="grouped", engine = "interactive")
subrules2 <- sample(subrules, 5)
plot(subrules2, method="graph")
plot(subrules2, method="graph",
nodeCol = grey.colors(10), edgeCol = grey(.7), alpha = 1)
plot(subrules2, method="graph", engine="graphviz")
# Ejecutar en local
plot(subrules2, method="graph", engine="htmlwidget")
plot(subrules2, method="graph", engine="graphviz")
plot(subrules2, method="graph", engine="htmlwidget",
igraphLayout = "layout_in_circle")
##Trabajando con transacciones
library(arules)
data("Groceries")
class(Groceries)
Groceries[1]
inspect(Groceries[1])
is.subset("citrus fruit",Groceries[1])
#is.subset("citrus fruit",Groceries[1])
lista_items1 <- c("dishes")
items_trans1 <- new("itemsets",
items = encode(list(lista_items1),
itemLabels = itemLabels(Groceries))
)#end new
inspect(items_trans1)
incluido <- is.subset(items_trans1,Groceries[1])
incluido
itemLabels = itemLabels(Groceries)
itemLabels(Groceries)
inspect(items_trans1)
incluido <- is.subset(items_trans1,Groceries[1])
incluido
as.logical(incluido)
lista_items2 <- c("tropical fruit")
items_trans2 <- new("itemsets",
items = encode(list(lista_items2),
itemLabels = itemLabels(Groceries))
)#end new
inspect(items_trans2)
incluido <- is.subset(items_trans2,Groceries[1])
incluido
lista_items2 <- c("citrus fruit")
items_trans2 <- new("itemsets",
items = encode(list(lista_items2),
itemLabels = itemLabels(Groceries))
)#end new
inspect(items_trans2)
incluido <- is.subset(items_trans2,Groceries[1])
incluido
as.logical(incluido)
x[1]@data
data
mi.size <- function(x){
longitud <- sum(x[1]@data)
return(longitud)
}
mi.size(Groceries[1])
@data
sum(x[1]@data)
Groceries[1]@data
mis.productos.longitud <- function(x){
longitud <- sum(x[1]@data)
productos <- itemLabels(x)[which(x[1]@data)]
return(list(length=longitud, prod=productos ))
}
mis.productos.longitud(Groceries[1])
load("titanic.raw.rdata")
load("C:/Users/jorge/Desktop/3_SOFTWARE/2o_CUATRI/LAB_COMP/Pruebas/titanic.raw.rdata")
View(titanic.raw)
load("titanic.raw.rdata")
load("titanic.raw.rdata")
library(arules)
data("titanic.raw")
r1 <- apriori(titanic.raw,  parameter = list(supp = 0.01, conf = 0.001,
target = "rules"))
summary(r1)
no_redundant <- which(!is.redundant(r1))
no_redundant
r <- r1[no_redundant]
r
survived_no <- subset(r1, subset = lhs %in% "Survived=No" | rhs %in% "Survived=No" )
inspect(survived_no)
survived_no
survived_no <- subset(r, subset = lhs %in% "Survived=No" | rhs %in% "Survived=No" )
survived_no
regla_mas_soporte <- sort(r)
regla_mas_soporte
inspect(regla_mas_soporte)
regla_mas_soporte <- sort(r)[1]
inspect(regla_mas_soporte)
reglas_ordenadas <- sort(r, by="support", decreasing = TRUE)
rhs_rule <- rhs(reglas_ordenadas[1])
print(rhs_rule)
rhs_rule <- labels(rhs(reglas_ordenadas[1]))
print(rhs_rule)
significant <- which(is.significant(r))
significant
rSignificant <- r[significant]
rSignificant
frecuentes <- apriori(titanic.raw,  parameter = list(supp = 0.01, conf > 0.2,
target = "frequent itemsets"))
frecuentes <- apriori(titanic.raw,  parameter = list(supp = 0.01, conf = 0.2,
target = "frequent itemsets"))
inspect(frecuentes)
sort(frecuentes, by="count")
frecuentes <- apriori(titanic.raw,  parameter = list(supp = 0.01, conf = 0.2,
target = "frequent itemsets"))
inspect(head(frecuentes,5))
inspect(head(frecuentes,5))
frecuentes <- apriori(titanic.raw,  parameter = list(supp = 0.01, conf = 0.2,
target = "frequent itemsets"))
frecuentes <- sort(frecuentes, by="count")
inspect(head(frecuentes,5))
fc_planets
fc_planets <- FormalContext$new(planets)
library(devtools)
library(fcaR)
data("planets")
View(planets)
fc_planets <- FormalContext$new(planets)
fc_planets
fc_planets$plot()
fc_planets$concepts
planeta <- Set$new(fc_planets$objects)
planeta$assign(c("Pluto","Jupiter"))
planeta
planeta$assign(Pluto=1,Jupiter=1)
planeta
fc_planets$intent(planeta)
feat <- Set$new(fc_planets$attributes)
feat$assign(far=1,moon=1)
fc_planets$extent(feat)
fc_planets$find_concepts()
fc_planets$concepts
fc_planets$concepts[4:5]
fc_planets$concepts$plot()
fc_planets$find_implications()
fc_planets$implications
sizes <- fc_planets$implications$size()
colMeans(sizes)
fc_planets$implications$apply_rules(
rules = c("composition",
"generalization",
"simplification"))
sizes <- fc_planets$implications$size()
colMeans(sizes)
View(AdultUCI)
load("titanic.raw.rdata")
library(arules)
View(r1)
survived_no
inspect(survived_no)
print(rhs_rule)
reglas_ordenadas
inspect(reglas_ordenadas)
significant
rSignificant
inspect(rSignificant)
View(titanic.raw)
frecuentes
inspect(frecuentes)
inspect(head(frecuentes,5))
inspect(head(frecuentes,5))
subset(r1, subset = rhs %in% "Age=Adult" & lift>1)
R1_age_adult <-  subset(r1, subset = rhs %in% "Age=Adult" & lift > 1)
inspect(R1_age_adult)
r1_age <- subset(r1, subset = rhs %pin% "Age" & lift > 1)
inspect(r1_age)
r1_age <- subset(r1, subset = rhs %oin% c("Age=Adult","Survived=No") & lift > 1)
inspect(r1_age)
r1_age <- subset(r1, subset = rhs %ain% c("Age=Adult","Survived=No") & lift > 1)
inspect(r1_age)
inspect(r1_age)
r1_age <- subset(r1, subset = rhs %oin% c("Age=Adult","Survived=No") & lift > 1)
inspect(r1_age)
sort(r1_age, by="lift")
r1_age_sorted <- sort(r1_age, by="lift")
inspect(r1_age_sorted)
inspect(r1)
r1[2]
inspect(r1[2])
soporte_r1_2 <- support(r1[2])
soporte_r1_2 <- r1[2]$support
soporte_r1_2 <- r1[2]@quality$support
soporte_r1_2
reglas_sorted <- sort(r1, by="support")
reglas_sorted
inspect(reglas_sorted)
inspect(reglas_sorted)
rhs_regla <- labels(rhs(reglas_sorted[1]))
rhs_regla
reglas_sorted_conf <- sort(r1, by="confidence")
inspect(reglas_sorted_conf)
# Elegir una regla aleatoriamente
num <- sample(1:length(reglas_ordenadas), 1)
num
rhs_regla_conf <- labels(rhs(reglas_sorted_conf[num]))
inspect(rhs_regla_conf)
rhs_regla_conf
# Calcular cuántas transacciones contienen este atributo
# Primero convertimos el atributo a un itemset
atributo_itemset <- as(atributo_derecha, "itemset")
# Calcular cuántas transacciones contienen este atributo
# Primero convertimos el atributo a un itemset
atributo_itemset <- as(rhs_regla_conf, "itemset")
rhs_regla_conf <- rhs(reglas_sorted_conf[num])
rhs_regla_conf_legible <- labels(rhs_regla_conf)
rhs_regla_conf_legible
# Luego calculamos cuántas transacciones lo contienen usando matching
transacciones_con_atributo <- sum(is.subset(rhs_regla_conf, titanic.raw))
class(titanic.raw)
library(devtools)
library(fcaR)
data("planets")
View(planets)
fc_planets <- FormalContext$new(planets)
fc_planets
fc_planets$plot()
planeta <- Set$new(fc_planets$objects)
planeta
planeta$assign(Pluto=1,Jupiter=1)
fc_planets$intent(planeta)
feat <- Set$new(fc_planets$attributes)
feat$assign(far=1,moon=1)
fc_planets$extent(feat)
fc_planets$find_concepts()
fc_planets$concepts
fc_planets$find_implications()
fc_planets$implications
sizes <- fc_planets$implications$size()
colMeans(sizes)
fc_planets$implications$apply_rules(
rules = c("composition",
"generalization",
"simplification"))
fc_planets$implications$cardinality()
fc_planets$implications$size()
colMeans(sizes)
sizes <- fc_planets$implications$size()
colMeans(sizes)
library(fcaR)
fc <- FormalContext$new("animals_en.cxt")
fc
View(fc)
#| my-chunk, eval = FALSE
install.packages(c("BiocManager", "remotes"))
BiocManager::install("Rgraphviz")
remotes::install_github("kciomek/hasseDiagram")
#| my-chunk2, eval = FALSE
remotes::install_github("neuroimaginador/fcaR")
library(fcaR)
fc <- FormalContext$new("animals_en.cxt")
fc
fc$plot()
fc$plot()
fc$scale()
fc
fc <- FormalContext$new("animals_en.cxt")
fc
fc$plot()
fc$plot()
fc$to_latex()
atributos <- fc$attributes
objetos <- fc$objects
atributos
slice(atributos[1:3])
head(atributos, 3)
head(objetos, 3)
feat <- Set$new(fc$attributes)
fc$plot()
feat$assign(livestock=1)
fc$extent(feat)
fc$plot()
feat <- Set$new(atributos)
feat$assign(livestock=1)
fc$extent(feat)
fc_animals <- Set$new(objetos)
animal <- Set$new(objetos)
fc_animals <- NULL
animal$assign(chicken=1,dove=1)
fc$intent(animal)
fc$plot()
attr1 <- Set$new(atributos)
attr1$assign(livestock=1)
ext <- fc$extent(attr1)
attr2 <- fc$intent(ext)
attr2
ext
is.closed(attr1)
fc$is_closed(attr1)
fc$is_closed(attr2)
fc$plot()
obj1 <- Set$new(objetos)
obj1$assign(elephant=1)
obj1
obj2 <- fc$closure(obj1)
obj2
int <- fc$intent(obj1)
obj2 <- fc$extent(int)
obj2
fc$find_implications()
fc$concepts
fc$implications
fc$concepts$plot()
fc$implications$cardinality()
sum(fc$concepts)
obj1
int
length(fc$concepts)
fc$concepts[1:10]
fc$concepts[1:10]
fc$concepts$size()
fc$concepts$supremum()
fc$concepts$supremum(fc$concepts)
fc$concepts$infimum(fc$concepts)
fc$concepts$top()
fc$concepts$bottom()
support(fc$concepts)
fc$concepts$support()
soportes <- fc$concepts$support()
sort(soportes, decreasing = TRUE)
sort(fc$concepts, by="support")
order(fc$concepts$support(), decreasing = TRUE)
fc$concepts(indices[1:3])
fc$concepts[indices[1:3]]
indices <- order(fc$concepts$support(), decreasing = TRUE)
fc$concepts[indices[1:3]]
fc$concepts$subconcepts(fifth)
fifth <- fc$concepts[5]
fc$concepts$subconcepts(fifth)
fc$concepts$superconcepts(fifth)
fc$concepts$lower_neighbours(fifth)
fc$concepts$upper_neighbours(fifth)
fc$find_implications()
fc$implications
fc$implications[1:10]
fc$implications$cardinality()
first_five <- fc$implications[1:5]
first_five$to_latex()
fc$implications$closure(attr1)
fc$implications$closure(reduce = TRUE)
fc$closure(reduce = TRUE)
fc$implication$closure(attr1, reduce = TRUE)
fc$implication$closure(reduce = TRUE)
nocturnal_rules <- subset(fc$implications, subset = rhs %pin% "nocturnal" )
nocturnal <- fc$implications$filter(rhs = "nocturnal")
nocturnal
nocturnal <- fc$implications$filter(lhs = "nocturnal")
nocturnal_right <- fc$implications$filter(rhs = "nocturnal")
nocturnal_left <- fc$implications$filter(lhs = "nocturnal")
nocturnal_right
nocturnal_left
nocturnal <- fc$implications$filter(rhs = "scales")$filter(rhs = "nocturnal")
nocturnal
library(tidyverse)
setwd("C:/Users/jorge/Desktop/3_SOFTWARE/2o_CUATRI/TAW/MOMDB/Datasets")
credits <- read.csv("tmdb_5000_credits.csv")
credits
View(credits)
View(credits)
str(credits$crew)
library(dplyr)
library(stringr)
library(purrr)
# Suponiendo que el dataset se llama "credits"
trabajos_unicos <- credits$crew %>%
map(~ fromJSON(.) %>% as_tibble()) %>%  # Convertir el string JSON en un dataframe
bind_rows() %>%                         # Unir todas las filas
distinct(job)                            # Obtener los valores únicos
print(trabajos_unicos)
library(jsonlite)
install.packages("jsonlite")
# Extraer trabajos únicos de la columna crew
trabajos_unicos <- credits$crew %>%
map(~ fromJSON(.) %>% as_tibble()) %>%  # Convertir cada string JSON en un dataframe
bind_rows() %>%                         # Unir todas las filas en un solo dataframe
distinct(job) %>%                        # Obtener los valores únicos
pull(job)                                # Convertir en vector
print(trabajos_unicos)
